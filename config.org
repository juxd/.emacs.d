#+TITLE: juxd's newbie emacs config

* Still todo:
  - [ ] Disable backup files
  - [ ] Auto-complete for AUCTeX

* Some emacs preferences:
  #+BEGIN_SRC emacs-lisp :tangle yes
(setq inhibit-startup-message t)
(setq custom-file "~/.emacs.d/custom.el")
(setq mac-option-modifier 'super)
(setq mac-command-modifier 'meta)
(defalias 'yes-or-no-p 'y-or-n-p)

(add-to-list 'default-frame-alist '(font . "Iosevka 14"))
(add-to-list 'auto-mode-alist '("\\.pdf\\'" . doc-view-mode))

(set-face-attribute 'default t :font "Iosevka 14" )

(when (version<= "26.0.50" emacs-version)
  (global-display-line-numbers-mode))
  #+END_SRC

Custom buttons :D
#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

Indentation
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default tab-width 2)
(setq-default c-basic-offset 4) ;; Set C offset
(setq-default js-indent-level 2)
(setq-default indent-tabs-mode nil)
(setq-default show-trailing-whitespace t) ;; show trailing whitespaces
#+END_SRC

Org mode hooks
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-mode-hook (lambda () (mac-auto-operator-composition-mode 1)))
;; Adds alphabetical bulleting. JK ITS BROKEN
;;(setq org-list-allow-alphabetical nil)
#+END_SRC

Snippets
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
  :diminish yas-global-mode yas-minor-mode
  :config
  (yas-global-mode +1)
  :custom
  (yas-snippet-dirs '("~/.emacs.d/snippets/snippets/")))
#+END_SRC

Remove blinking cursor
#+BEGIN_SRC emacs-lisp :tangle yes
(blink-cursor-mode 0)
#+END_SRC
* Exec path from shell:
  #+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :ensure f
  :if (memq window-system '(mac ns))
  :config
  (exec-path-from-shell-initialize))
  #+END_SRC
* flycheck:
#+BEGIN_SRC: emacs-lisp :tangle yes
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC
* Some shit I got from online:
** Noob helpers
  #+BEGIN_SRC emacs-lisp :tangle yes
(use-package try
  :ensure t)

(use-package which-key
  :ensure t
  :config (which-key-mode))

(delete-selection-mode 1)
  #+END_SRC
** Typing helpers
  #+BEGIN_SRC emacs-lisp :tangle yes
(use-package avy
  :ensure t
  :config
  (avy-setup-default))

;; auto-complete settings
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))

(setq ac-auto-start nil)
(ac-set-trigger-key "TAB")

(setq-default truncate-lines t)

(defun jethro/truncate-lines-hook () ;; stolen from jethro :P
  (setq truncate-lines nil))

(add-hook 'text-mode-hook 'jethro/truncate-lines-hook)
  #+END_SRC
** Swiper no swiping
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package counsel
      :ensure t
      )

    (use-package swiper
      :ensure try
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(global-set-key "\C-s" 'swiper)
	(global-set-key (kbd "C-c C-r") 'ivy-resume)
	(global-set-key (kbd "<f6>") 'ivy-resume)
	(global-set-key (kbd "M-x") 'counsel-M-x)
	(global-set-key (kbd "C-x C-f") 'counsel-find-file)
	(global-set-key (kbd "<f1> f") 'counsel-describe-function)
	(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	(global-set-key (kbd "<f1> l") 'counsel-load-library)
	(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
	(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
	(global-set-key (kbd "C-c g") 'counsel-git)
	(global-set-key (kbd "C-c j") 'counsel-git-grep)
	(global-set-key (kbd "C-c k") 'counsel-ag)
	(global-set-key (kbd "C-x l") 'counsel-locate)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))
  #+END_SRC
* Theme lol:
  #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package all-the-icons)
  (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))
  (require 'doom-themes)

  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  #+END_SRC
* LaTeX:
  #+BEGIN_SRC emacs-lisp :tangle yes
(setq org-preview-latex-default-process 'imagemagick)
(use-package auctex
  :defer t
  :mode ("\\.tex\\'" . latex-mode)
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-syntactic-comment t)
  ;; Synctex Support
  (TeX-source-correlate-start-server nil)
  ;; Don't insert line-break at inline math
  (LaTeX-fill-break-at-separators nil)
  (TeX-view-program-list '(("zathura" "zathura --page=%(outpage) %o")))
  (TeX-view-program-selection '((output-pdf "zathura")))
  :config
  (setq-default TeX-engine 'luatex)
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (company-mode)
              (setq TeX-PDF-mode t)
              (setq TeX-source-correlate-method 'synctex)
              (setq TeX-source-correlate-start-server t)))
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode))
  (with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
          '("koma-article"
             "\\documentclass{scrartcl}"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
  #+END_SRC
* Agenda management:
  Sync org files with Dropbox for agenda management. Inspired by [[https://github.com/j0/][Joel]] & [[https://github.com/jethrokuan/.emacs.d][Jethro]].
** 1. Capture setup:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-capture-templates
  `(("w" "work" entry (file "~/Dropbox/org/todos.org")
  "* TODO %?\n%U\n%a\n")
  ("e" "low priority" entry (file "~/Dropbox/org/low-prio.org")
  "* TODO %?\n%U\n%a\n")
  ("r" "reading" entry (file "~/Dropbox/org/to-read.org")
  "* TODO %?\n%U\n%a\n")))
#+END_SRC
** 2. Agenda setup:
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-agenda)
(setq org-agenda-files
  `("~/Dropbox/org/todos.org"
    "~/Dropbox/org/low-prio.org"
    "~/Dropbox/org/to-read.org"))
(setq org-agenda-span 'month)
;; this is just so I keep track of when things are done
(setq org-log-done 'time)
#+END_SRC
* Epub reading:
#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+END_SRC
* Magit:
  #+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-x g") 'magit-status)
  #+END_SRC
* Reveal.js:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package htmlize
:ensure t)
#+ENd_SRC
* Rails projectile
#+BEGIN_SRC emacs-lisp :tangle yes
(setenv "PATH" (concat (getenv "HOME") "/.rbenv/shims:" (getenv "HOME") "/.rbenv/bin:" (getenv "PATH")))
(setq exec-path (cons (concat (getenv "HOME") "/.rbenv/shims") (cons (concat (getenv "HOME") "/.rbenv/bin") exec-path)))
(add-to-list 'load-path "~/.emacs.d/vendor/bundler.el")
(require 'bundler)
(projectile-rails-global-mode)
;; hotfix for rbenv shell problem.

#+END_SRC
* TIDE Setup
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package tide
  :ensure t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save)))

(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

(setq typescript-indent-level 2)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)

(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
(add-hook 'web-mode-hook
          (lambda ()
            (when (string-equal "tsx" (file-name-extension buffer-file-name))
              (setup-tide-mode))))
;; enable typescript-tslint checker
(require 'flycheck)
(flycheck-add-mode 'typescript-tslint 'web-mode)

(setq tide-format-options
'(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t
:placeOpenBraceOnNewLineForFunctions nil
:indentSize 2
:tabSize 2))
#+END_SRC
* Haskell:
TODO: add hs-lint.
#+BEGIN_SRC emacs_lisp :tangle yes
(custom-set-variables
 '(haskell-stylish-on-save t))
#+END_SRC
* Python IDE:
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package elpy
  :ensure t
  :init
  (elpy-enable))
#+END_SRC
* Prolog
  #+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-x p") 'ediprolog-dwim)
  (add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
  #+END_SRC
